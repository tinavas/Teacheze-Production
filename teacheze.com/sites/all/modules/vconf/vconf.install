<?php
// $Id$

/**
 * @file
 * Video Conference Integration Module : Installation
 */

/**
 * Implementation of hook_install()
 */
function vconf_install() {
  drupal_install_schema('vconf');
  
}

/**
 * Implementation of hook_uninstall()
 */
function vconf_uninstall() {
  //drupal_uninstall_schema('vconf');
	db_query("DROP TABLE {vconf_rooms};");
}

/**
 * Implementation of hook_schema()
 *
 * @return array of Schema API table definitions.
 */
function vconf_schema() {
  $schema['vconf_rooms'] = array(
    'fields' => array(
      'vid' => array('type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "Room ID",
      ),
      'nid' => array('type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "Node ID",
      ),
      'timecreated' => array('type' => 'int', 'not null' => TRUE, 'default' => 0,
        'description' => "Created Timestamp (Unix Timestamp, which is limited to values above Jan 1, 1970)",
      ),
      'timelastaccess' => array('type' => 'int', 'not null' => TRUE, 'default' => 0,
        'description' => "Last Access Timestamp (Unix Timestamp, which is limited to values above Jan 1, 1970)",
      ),
      'timeexpire' => array('type' => 'int', 'not null' => TRUE, 'default' => 0,
        'description' => "Expiration Timestamp (Unix Timestamp, which is limited to values above Jan 1, 1970)",
      ),
      'timeout' => array('type' => 'int', 'not null' => TRUE, 'default' => 0,
        'description' => "Clean if not used",
      ),
      'credits' => array('type' => 'int', 'not null' => TRUE, 'default' => 0,
        'description' => "Available time in minutes",
      ),
      'timeused' => array('type' => 'int', 'size' => 'big', 'not null' => TRUE, 'default' => 0,
        'description' => "How long was this used for",
      ),
      'welcome' => array('type' => 'text', 'not null' => FALSE,
        // NOTE:  On MySQL, text fields cannot have default values.
        'description' => "Room welcome message.",
      ),
      'background_url' => array('type' => 'text', 'not null' => FALSE,
        // NOTE:  On MySQL, text fields cannot have default values.
        'description' => "Room welcome message.",
      ),
      'layoutcode' => array('type' => 'text', 'not null' => FALSE,
        // NOTE:  On MySQL, text fields cannot have default values.
        'description' => "Room welcome message.",
      ),
      'room' => array('type' => 'varchar', 'length' => '64', 'not null' => FALSE,
        'description' => "Room welcome message.",
      ),
      'camwidth' => array(
        'description' => 'Camera resolution width',
        'type' => 'int',
        'size' => "small",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 320,
      ),
      'camheight' => array(
        'description' => 'Camera resolution height',
        'type' => 'int',
        'size' => "small",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 240,
      ),
      'camfps' => array(
        'description' => 'Camera frames per second',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 15,
      ),
      'micrate' => array(
        'description' => 'Micrate',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 22,
      ),
      'bandwidth' => array(
        'description' => 'Default bandwidth per stream',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 40960,
      ),
      'maxbandwidth' => array(
        'description' => 'Maximum bandwidth per stream',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 81920,
      ),
      'visitors' => array(
        'description' => 'Allow visitors',
        'type' => 'int',
        'size' => "tiny",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'filterregex' => array('type' => 'varchar', 'length' => '255', 'not null' => FALSE,
        'description' => "Filter regex.",
        'default' => "(?i)(fuck|cunt)(?-i)",
      ),
      'filterreplace' => array('type' => 'varchar', 'length' => '255', 'not null' => FALSE,
        'description' => "Filter replace.",
        'default' => " ** ",
      ),
      'autoviewcams' => array(
        'description' => 'Verbose level',
        'type' => 'int',
        'size' => "tiny",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'panelfiles' => array(
        'description' => 'Allow emoticons',
        'type' => 'int',
        'size' => "tiny",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'file_upload' => array(
        'description' => 'Setting parameters',
        'type' => 'int',
        'size' => "tiny",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'file_delete' => array(
        'description' => 'Setting parameters',
        'type' => 'int',
        'size' => "tiny",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'advancedcamsettings' => array(
        'description' => 'Setting parameters',
        'type' => 'int',
        'size' => "tiny",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'showtimer' => array(
        'description' => 'Setting parameters',
        'type' => 'int',
        'size' => "tiny",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'enabledvideo' => array(
        'description' => 'Setting parameters',
        'type' => 'int',
        'size' => "tiny",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'enabledsound' => array(
        'description' => 'Setting parameters',
        'type' => 'int',
        'size' => "tiny",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'configuresource' => array(
        'description' => 'Setting parameters',
        'type' => 'int',
        'size' => "tiny",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'showcamsettings' => array(
        'description' => 'Setting parameters',
        'type' => 'int',
        'size' => "tiny",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'tutorial' => array(
        'description' => 'Setting parameters',
        'type' => 'int',
        'size' => "tiny",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'fillwindow' => array(
        'description' => 'Setting parameters',
        'type' => 'int',
        'size' => "tiny",
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'timelastaccess' => array('timelastaccess'),
      'room' => array('room'),
      'nid' => array('nid'),
    ),
    'primary key' => array('vid', 'nid'),
  );

  return $schema;
}

/**
 * Implementation of hook_requirements().
 */
function vconf_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase != 'runtime') {
    return $requirements;
  }

  if ($phase == 'runtime') {

    $path = variable_get('vconf_path', "/vconf/");

    if (!file_exists(".". $path)) {
      $requirements['vconf_arr'] = array(
        'title' => $t('VideoWhisper video conference'),
        'value' => $t('Not found'),
        'description' => $t('Please <a target="_blank" href="http://www.videowhisper.com/?p=PHP+Video+Conference">download Video Conference application</a> and upload it in: ') . $path,
        'severity' => REQUIREMENT_ERROR,
      );
    }

    if (!user_access('access video conference room', drupal_anonymous_user())) {
      $requirements['vconf_access'] = array(
        'title' => $t('Video Conference anonymous access'),
        'value' => $t('Access denied'),
        'description' => $t('Invited parties (that could be anonymous users) cannot currently access chat rooms. Please assign the "access video conference" permission to the anonymous user role.'),
        'severity' => REQUIREMENT_WARNING,
      );
    }
  }

  return $requirements;
}

/**
 * Implementation of hook_enable().
 */
function vconf_enable() {
  // Set default permissions.
  db_query("UPDATE {permission} SET perm = concat(perm, ', access video conference room') WHERE rid = '1';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', access video conference room') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', create video conference room') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit video conference room') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', delete video conference room') WHERE rid = '2';");
  
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit welcome message') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit instantaccess') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit credits') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit cleanup') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit availability') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit bandwidth') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit maxbandwidth') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit filterregex') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit filterreplace') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit micrate') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit camfps') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit camheight') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit camwidth') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit fillwindow') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit tutorial') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit layoutcode') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit background_url') WHERE rid = '2';");
  
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit panelfiles') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit autoviewcams') WHERE rid = '2';");  
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit file_upload') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit file_delete') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit advancedcamsettings') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit showtimer') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit enabledvideo') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit enabledsound') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit configuresource') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', edit showcamsettings') WHERE rid = '2';");
  
  db_query("UPDATE {permission} SET perm = concat(perm, ', use autoviewcams') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use panelfiles') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use file_upload') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use file_delete') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use advancedcamsettings') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use showtimer') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use enabledvideo') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use enabledsound') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use configuresource') WHERE rid = '2';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use showcamsettings') WHERE rid = '2';");

  db_query("UPDATE {permission} SET perm = concat(perm, ', use autoviewcams') WHERE rid = '1';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use panelfiles') WHERE rid = '1';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use file_upload') WHERE rid = '1';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use file_delete') WHERE rid = '1';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use advancedcamsettings') WHERE rid = '1';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use showtimer') WHERE rid = '1';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use enabledvideo') WHERE rid = '1';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use enabledsound') WHERE rid = '1';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use configuresource') WHERE rid = '1';");
  db_query("UPDATE {permission} SET perm = concat(perm, ', use showcamsettings') WHERE rid = '1';");
}
