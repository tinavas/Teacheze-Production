<?php
// $Id$

/**
 * @file
 * Video Conference Integration Module
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Display help and module information
 *
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 *
 * @return help text for the path
 */
function vconf_help($path, $arg) {
  switch ($path) {
    case "admin/help/vconf":
      $output = '<p>' . t("Video Conference Script integration module details, installation instructions, updates") . ': <a href="http://www.videowhisper.com/?p=Drupal+Video+Conference+Module">http://www.videowhisper.com/?p=Drupal+Video+Conference+Module</a></p>';
      break;
  }
  return $output;
}
// function vconf_help

/**
 * Valid permissions for this module
 *
 * @return array An array of valid permissions for the vconf_module module
 */
function vconf_perm() {
  return array(	'administer video conference', 
				'create video conference room', 
				'edit video conference room', 
				'delete video conference room', 
				'edit any video conference room', 
				'delete any video conference room', 
				'access video conference room', 

				'edit welcome message', 

				'edit bandwidth', 

				'edit maxbandwidth', 

				'edit layoutcode', 
				'edit background_url', 

				'use panelfiles', 
				'edit panelfiles', 

				'edit filterregex', 
				
				'edit filterreplace', 

				'edit micrate', 

				'edit camfps', 

				'edit camheight', 

				'edit camwidth', 

				'edit credits', 

				'edit cleanup', 

				'edit availability', 

				'edit tutorial', 
				'edit fillwindow', 

				'use autoviewcams', 
				'edit autoviewcams', 

				'use showtimer', 
				'edit showtimer', 

				'use file_upload', 
				'edit file_upload', 

				'use file_delete', 
				'edit file_delete', 

				'use advancedcamsettings', 
				'edit advancedcamsettings', 

				'use enabledvideo', 
				'edit enabledvideo', 

				'use enabledsound', 
				'edit enabledsound', 

				'use configuresource', 
				'edit configuresource', 

				'use showcamsettings', 
				'edit showcamsettings', 

				'edit instantaccess' );
}

/**
 * Menu for this module
 *
 * @return array An array with this module's menus.
 */
function vconf_menu() {
  $items = array();
  $items['admin/settings/vconf'] = array(
    'title' => 'Video Conference',
    'description' => 'Video Conference admin interface.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vconf_admin'),
    'access arguments' => array('administer video conference'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['myvconf'] = array(
    'title' => 'Video Conferences',
    'description' => 'My video conference rooms.',
    'page callback' => 'vconf_roomlist',
    'access arguments' => array('edit video conference room'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Room list page
 *
 * @return page contents.
 */
function vconf_roomlist() {
  global $user;
  vconf_cleanup();

  $page_content = "";

  $options = array("attributes" => array("title" => $node->room, 'target' => '_blank'));

  $myrooms = db_query("SELECT room.room, node.title, node.nid FROM {vconf_rooms} as room, {node} as node WHERE node.uid=%d AND room.nid=node.nid ORDER BY room.timelastaccess DESC", $user->uid);
  if ($myrooms !== FALSE) {
    $page_content .= "<UL>";
    while ($row = db_fetch_array($myrooms)) {
      $link = l("$row[title] ($row[room])", "node/$row[nid]", $options);
      $page_content .= "<LI>$link</LI>";
    }
    $page_content .= "</UL>";
  }


  $link = l(t('Create new instant video conference room'), "node/add/vconf", $options);
  $page_content .= "<BR><h3>$link</h3>";
  return $page_content;
}

/**
 * Room login form
 *
 * @return form an array of form data.
 */
function vconf_start_form(&$form_state, $node) {
  global $base_url, $user;
  $url = $base_url . variable_get('vconf_path', "/vconf/") . "videowhisper_conference.php";

  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => ($user->name ? $user->name : "Guest"),
    '#size' => 24,
    '#maxlength' => 64,
    '#description' => t("Username as you want it displayed within the chat."),
  );

  $form['room'] = array('#type' => 'hidden', '#value' => check_plain($node->room));
  $form['usertype'] = array('#type' => 'hidden', '#value' => '0');

  $form['#action']     = $url;
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['submit']      = array(
    '#type' => 'submit',
    '#value' => t('Enter Video Conference'),
  );
  return $form;
}

/**
 * Rooms cleanup
 */
function vconf_cleanup() {
  //cleanup
  $ztime = time();
  db_query("DELETE FROM {vconf_rooms} WHERE ((timeexpire>0) AND (timeexpire<$ztime)) OR ((timeout>0) AND (($ztime-timelastaccess)>timeout))");
}

/**
 * Admin page
 *
 * @return page contents.
 */
function vconf_admin() {
  $form = array();

  $form['vconf_rtmp2'] = array(
    '#type' => 'textfield',
    '#title' => t('RTMP application address'),
    '#default_value' => variable_get('vconf_rtmp2', "rtmp://server-domain-or-ip/videowhisper"),
    '#size' => 48,
    '#maxlength' => 255,
    '#description' => t('RTMP application address on a rtmp server. See <a href="http://www.videowhisper.com/?p=Requirements" target="_blank">Requirements</a> if you need more details about this.'),
    '#required' => TRUE,
  );

  $form['vconf_amf2'] = array(
    '#type' => 'textfield',
    '#title' => t('RTMP AMF'),
    '#default_value' => variable_get('vconf_amf2', "AMF3"),
    '#size' => 48,
    '#maxlength' => 10,
    '#description' => t("RTMP AMF (AMF3 : Red5, Wowza, FMIS3, FMIS3.5)"),
    '#required' => TRUE,
  );

  $form['vconf_room_prefix2'] = array(
    '#type' => 'textfield',
    '#title' => t('Default room name'),
    '#default_value' => variable_get('vconf_room_prefix2', "InstantRoom"),
    '#size' => 24,
    '#maxlength' => 48,
    '#description' => t("Default room name. A hash code is added if not changed by room creator."),
    '#required' => TRUE,
  );

  $found = "";
  $path = variable_get('vconf_path', "/vconf/");
  if (file_exists("." . $path)) {
    $found = t('Application folder detected: ') . $path;
  }
  else $found = t('Please <a target="_blank" href="@url-download">download video conference application</a>. Application folder NOT detected: %path', array('@url-download' => 'http://www.videowhisper.com/?p=PHP+Video+Conference', '%path' => $path));

  $form['vconf_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Video Conference path'),
    '#default_value' => variable_get('vconf_path', "/vconf/"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Path for the Video Conference application folder.") . " " . $found,
    '#required' => TRUE,
  );

  $form['vconf_cammaxbandwidth2'] = array(
    '#type' => 'textfield',
    '#title' => t('camMaxBandwidth'),
    '#default_value' => variable_get('vconf_cammaxbandwidth2', "81920"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set camMaxBandwidth parameters."),
    '#required' => TRUE,
  );

  $form['vconf_bufferlive2'] = array(
    '#type' => 'textfield',
    '#title' => t('bufferLive'),
    '#default_value' => variable_get('vconf_bufferlive2', "0.1"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set bufferLive parameters."),
    '#required' => TRUE,
  );

  $form['vconf_bufferfull2'] = array(
    '#type' => 'textfield',
    '#title' => t('bufferFull'),
    '#default_value' => variable_get('vconf_bufferfull2', "0.1"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set bufferFull parameters."),
    '#required' => TRUE,
  );

  $form['vconf_bufferliveplayback2'] = array(
    '#type' => 'textfield',
    '#title' => t('bufferLivePlayback'),
    '#default_value' => variable_get('vconf_bufferliveplayback2', "0.1"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set bufferLivePlayback parameters."),
    '#required' => TRUE,
  );

  $form['vconf_bufferfullplayback2'] = array(
    '#type' => 'textfield',
    '#title' => t('bufferFullPlayback'),
    '#default_value' => variable_get('vconf_bufferfullplayback2', "0.1"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set bufferFullPlayback parameters."),
    '#required' => TRUE,
  );

  $form['vconf_disablebandwidthdetection2'] = array(
    '#type' => 'radios',
    '#title' => t('disableBandwidthDetection'),
    '#default_value' => variable_get('vconf_disablebandwidthdetection2', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set disableBandwidthDetection parameters'),
  );

  $form['vconf_limitbybandwidth2'] = array(
    '#type' => 'radios',
    '#title' => t('limitBybandwidth'),
    '#default_value' => variable_get('vconf_limitbybandwidth2', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set limitBybandwidth parameters'),
  );

  $form['vconf_disableuploaddetection2'] = array(
    '#type' => 'radios',
    '#title' => t('disableUploadDetection'),
    '#default_value' => variable_get('vconf_disableuploaddetection2', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set disableUploadDetection parameters'),
  );

  $form['vconf_tutorial2'] = array(
    '#type' => 'radios',
    '#title' => t('Tutorial'),
    '#default_value' => variable_get('vconf_tutorial2', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set Tutorial parameters'),
  );

  $form['vconf_fillwindow2'] = array(
    '#type' => 'radios',
    '#title' => t('fillwindow'),
    '#default_value' => variable_get('vconf_fillwindow2', 0),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set fillwindow parameters'),
  );

  $form['vconf_autoviewcams2'] = array(
    '#type' => 'radios',
    '#title' => t('autoViewcams'),
    '#default_value' => variable_get('vconf_autoviewcams2', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t("Set autoViewcams parameters."),
  );

  $form['vconf_panelfiles2'] = array(
    '#type' => 'radios',
    '#title' => t('panelFiles'),
    '#default_value' => variable_get('vconf_panelfiles2', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t("Set panelFiles parameters."),
  );

  $form['vconf_file_upload2'] = array(
    '#type' => 'radios',
    '#title' => t('fileUpload'),
    '#default_value' => variable_get('vconf_file_upload2', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t("Set file_upload parameters."),
  );

  $form['vconf_file_delete2'] = array(
    '#type' => 'radios',
    '#title' => t('fileDelete'),
    '#default_value' => variable_get('vconf_file_delete2', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t("Set file_delete parameters."),
  );

  $form['vconf_showtimer2'] = array(
    '#type' => 'radios',
    '#title' => t('showTimer'),
    '#default_value' => variable_get('vconf_showtimer2', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set showTimer parameters'),
  );

  $form['vconf_enabledvideo2'] = array(
    '#type' => 'radios',
    '#title' => t('enabledVideo'),
    '#default_value' => variable_get('vconf_enabledvideo2', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set enabledVideo parameters'),
  );

  $form['vconf_enabledsound2'] = array(
    '#type' => 'radios',
    '#title' => t('enabledSound'),
    '#default_value' => variable_get('vconf_enabledsound2', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set enabledSound parameters'),
  );

  $form['vconf_configuresource2'] = array(
    '#type' => 'radios',
    '#title' => t('configureSource'),
    '#default_value' => variable_get('vconf_configuresource2', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set configureSource parameters'),
  );

  $form['vconf_advancedcamsettings2'] = array(
    '#type' => 'radios',
    '#title' => t('advancedcamsettings'),
    '#default_value' => variable_get('vconf_advancedcamsettings2', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set advancedcamsettings parameters'),
  );

  $form['vconf_showcamsettings2'] = array(
    '#type' => 'radios',
    '#title' => t('showCamsettings'),
    '#default_value' => variable_get('vconf_showcamsettings2', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set showCamsettings parameters'),
  );

  return system_settings_form($form);
}

function vconf_node_info() {
  return array(
    'vconf' => array(
      'name' => t('Video Conference room'),
      'module' => 'vconf',
      'description' => t("A <i>room</i> that can be used for customized video conference."),
      'has_title' => TRUE,
      'title_label' => t('Video Conference'),
      'has_body' => TRUE,
      'body_label' => t('Room Description'),
    ),
  );
}

function vconf_access($op, $node, $account) {

  if ($op == 'access') {
    return user_access('access video conference room', $account);
  }

  if ($op == 'create') {
    return user_access('create video conference room', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any video conference room', $account) || (user_access('edit video conference room', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any video conference room', $account) || (user_access('delete video conference room', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_form().
 */
function vconf_form(&$node) {
  // The site admin can decide if this node type has a title and body, and how
  // the fields should be labeled. We need to load these settings so we can
  // build the node form correctly.
  global $user; // this added by keeperprancis
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5,
    );
  }

  if ($type->has_body) {
    // In Drupal 6, we can use node_body_field() to get the body and filter
    // elements. This replaces the old textarea + filter_form() method of
    // setting this up. It will also ensure the teaser splitter gets set up
    // properly.
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }
  
  $form['room'] = array(
    '#type' => 'textfield',
    '#title' => t('New room name'),
    '#default_value' => isset($node->room) ? $node->room : variable_get('vconf_room_prefix2', 'InstantRoom'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("Label that will be used to access the room. Leave as it is to generate one."),
  );

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced room settings'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  if (user_access('edit welcome message', $user)) {
	  $form['advanced']['welcome'] = array(
		'#type' => 'textarea',
		'#title' => t('Welcome message'),
		'#default_value' => isset($node->welcome) ? $node->welcome : 'Welcome!',
		'#cols' => 32,
		'#rows' => 2,
		'#description' => t("Welcome message displayed when entering room."),
	  );
  } else {
	  $form['advanced']['welcome'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->welcome) ? $node->welcome : 'Welcome!',
	  );
  }
  
  if (user_access('edit background_url', $user)) {
	  $form['advanced']['background_url'] = array(
		'#type' => 'textfield',
		'#title' => t('Background url'),
		'#default_value' => isset($node->background_url) ? $node->background_url : '',
		'#size' => 48,
		'#maxlength' => 255,
		'#description' => t("Background url for room."),
	  );
  } else {
	  $form['advanced']['background_url'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->background_url) ? $node->background_url : '',
	  );
  }

  if (user_access('edit layoutcode', $user)) {
	  $form['advanced']['layoutcode'] = array(
		'#type' => 'textarea',
		'#title' => t('Layout code'),
		'#default_value' => isset($node->layoutcode) ? $node->layoutcode : '',
		'#cols' => 32,
		'#rows' => 2,
		'#description' => t("Layout code for room."),
	  );
  } else {
	  $form['advanced']['layoutcode'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->layoutcode) ? $node->layoutcode : '',
	  );
  }

  if (user_access('edit filterregex', $user)) {
	  $form['advanced']['filterregex'] = array(
		'#type' => 'textfield',
		'#title' => t('Filter regex'),
		'#default_value' => isset($node->filterregex) ? $node->filterregex : "(?i)(fuck|cunt)(?-i)",
		'#size' => 48,
		'#maxlength' => 255,
		'#description' => t("Filter regex."),
	  );
  } else {
	  $form['advanced']['filterregex'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->filterregex) ? $node->filterregex : "(?i)(fuck|cunt)(?-i)",
	  );
  }

  if (user_access('edit filterreplace', $user)) {
		$form['advanced']['filterreplace'] = array(
			'#type' => 'textfield',
			'#title' => t('Filter replace'),
			'#default_value' => isset($node->filterreplace) ? $node->filterreplace : " ** ",
			'#size' => 6,
			'#maxlength' => 255,
			'#description' => t("Filter replace."),
		);
  } else {
	  $form['advanced']['filterreplace'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->filterreplace) ? $node->filterreplace : " ** ",
	  );
  }

  if (user_access('edit tutorial', $user)) {
	  $options = array("1" => t('Yes'), "0" => t('No'));
	  $form['advanced']['tutorial'] = array(
		'#type' => 'select',
		'#title' => t('tutorial'),
		'#default_value' => isset($node->tutorial) ? $node->tutorial : variable_get('vconf_tutorial2', "1"),
		'#options' => $options,
		'#description' => t('tutorial.'),
	  );
  } else {
	  $form['advanced']['tutorial'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->tutorial) ? $node->tutorial : variable_get('vconf_tutorial2', "1"),
	  );
  }

  if (user_access('edit fillwindow', $user)) {
	  $options = array("1" => t('Yes'), "0" => t('No'));
	  $form['advanced']['fillwindow'] = array(
		'#type' => 'select',
		'#title' => t('fillwindow'),
		'#default_value' => isset($node->fillwindow) ? $node->fillwindow : variable_get('vconf_fillwindow2', "0"),
		'#options' => $options,
		'#description' => t('fillwindow.'),
	  );
  } else {
	  $form['advanced']['fillwindow'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->fillwindow) ? $node->fillwindow : variable_get('vconf_fillwindow2', "1"),
	  );
  }

  if (user_access('edit instantaccess', $user)) {
		$options = array("1" => t('Yes'), "0" => t('No'));
		$form['advanced']['visitors'] = array(
			'#type' => 'select',
			'#title' => t('Instant access'),
			'#default_value' => isset($node->visitors) ? $node->visitors : "1",
			'#options' => $options,
			'#description' => t('Allow non registered users to access chat. If disabled people will not be able to access chat instantly, without having and account and beeing logged in.'),
		);
	} else {
	  $form['advanced']['visitors'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->visitors) ? $node->visitors : '1',
	  );
	}

  if (user_access('edit credits', $user)) {
		$form['advanced']['credits'] = array(
			'#type' => 'textfield',
			'#title' => t('Credits'),
			'#default_value' => isset($node->credits) ? $node->credits : 0,
			'#size' => 5,
			'#maxlength' => 6,
			'#description' => t("Maximum total number of streaming minutes this room can be used for. Usage of all users is added up (i.e. 2 users chatting for 10 minutes will require 20 credits). Leave 0 for unlimited usage time."),
		);
	} else {
	  $form['advanced']['credits'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->credits) ? $node->credits : 0,
	  );
	}

  if ($node->timeexpire > 0) {
    $node->expire = floor(($node->timeexpire - time())  / 3600);
  }

  if (user_access('edit availability', $user)) {
		$form['advanced']['expire'] = array(
			'#type' => 'textfield',
			'#title' => t('Availability'),
			'#default_value' => isset($node->expire) ? $node->expire : 0,
			'#size' => 5,
			'#maxlength' => 6,
			'#description' => t("Number of hours this room will be accessible (i.e. 720 for 1 month). Leave 0 to make permanent room."),
		);
	} else {
	  $form['advanced']['expire'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->expire) ? $node->expire : 0,
	  );
	}

  $node->cleanup = floor($node->timeout / 3600);
  if (user_access('edit cleanup', $user)) {
		$form['advanced']['cleanup'] = array(
			'#type' => 'textfield',
			'#title' => t('Cleanup'),
			'#default_value' => isset($node->cleanup) ? $node->cleanup : 0,
			'#size' => 5,
			'#maxlength' => 6,
			'#description' => t("If room is not used for this number of hours will be deleted. Leave 0 for no cleanup."),
		);
	} else {
	  $form['advanced']['cleanup'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->cleanup) ? $node->cleanup : 0,
	  );
	}

  $form['advanced']['webcam'] = array(
    '#type' => 'fieldset',
    '#title' => t('Streaming'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $node->resolution = $node->camwidth . "x" . $node->camheight;
  if (user_access('edit camwidth', $user) && user_access('edit camheight', $user)) {
		$options = array("320x240" => "320x240", "160x120" => "160x120", "176x144" => "176x144", "352x288" => "352x288", "640x480" => "640x480", "1024x768" => "1024x768", "1280x720"=>"1280x720", "1366x768" => "1366x768", "1920x1080" => "1920x1080" );
		$form['advanced']['webcam']['resolution'] = array(
			'#type' => 'select',
			'#title' => t('Resolution'),
			'#default_value' => isset($node->resolution) ? $node->resolution : "320x240",
			'#options' => $options,
			'#description' => t('Camera desired mode: resolution.'),
		);
	} else {
	  $form['advanced']['webcam']['resolution'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->resolution) ? $node->resolution : "320x240",
	  );
	}

	if (user_access('edit camfps', $user)) {
		$options = array("15" => "15", "10" => "10", "12" => "12", "20" => "20", "25" => "25", "30" => "30");
		$form['advanced']['webcam']['camfps'] = array(
			'#type' => 'select',
			'#title' => t('FPS'),
			'#default_value' => isset($node->camfps) ? $node->camfps : 15,
			'#options' => $options,
			'#description' => t('Camera desired  mode: frames per second.'),
		);
	} else {
	  $form['advanced']['webcam']['camfps'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->camfps) ? $node->camfps : 15,
	  );
	}

	if (user_access('edit micrate', $user)) {
		$options = array("22" => "22", "11" => "11", "44" => "44", "48" => "48");
		$form['advanced']['webcam']['micrate'] = array(
			'#type' => 'select',
			'#title' => t('Micrate'),
			'#default_value' => isset($node->micrate) ? $node->micrate : 22,
			'#options' => $options,
			'#description' => t('Camera desired  mode: micrate.'),
		);
	} else {
	  $form['advanced']['webcam']['micrate'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->micrate) ? $node->micrate : 22,
	  );
	}

  if (user_access('edit bandwidth', $user)) {
	  $form['advanced']['webcam']['bandwidth'] = array(
		'#type' => 'textfield',
		'#title' => t('Bandwidth'),
		'#default_value' => isset($node->bandwidth) ? $node->bandwidth : 40960,
		'#size' => 6,
		'#maxlength' => 8,
		'#description' => t("Default bandwidth per video stream in bytes per second."),
	  );
  } else {
	  $form['advanced']['webcam']['bandwidth'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->bandwidth) ? $node->bandwidth : 40960,
	  );
  }

  if (user_access('edit maxbandwidth', $user)) {
	  $form['advanced']['webcam']['maxbandwidth'] = array(
		'#type' => 'textfield',
		'#title' => t('Maximum bandwidth'),
		'#default_value' => isset($node->maxbandwidth) ? $node->maxbandwidth : 65536,
		'#size' => 6,
		'#maxlength' => 8,
		'#description' => t("Maximum bandwidth per video stream in bytes per second."),
	  );
  } else {
	  $form['advanced']['webcam']['maxbandwidth'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->maxbandwidth) ? $node->maxbandwidth : 65536,
	  );
  }

  $form['advanced']['param'] = array(
    '#type' => 'fieldset',
    '#title' => t('Permissions'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  if (user_access('edit autoviewcams', $user)) {
	  $options = array("1" => t('Yes'), "0" => t('No'));
	  $form['advanced']['param']['autoviewcams'] = array(
		'#type' => 'select',
		'#title' => t('autoviewcams'),
		'#default_value' => isset($node->autoviewcams) ? $node->autoviewcams : variable_get('vconf_autoviewcams2', "1"),
		'#options' => $options,
		'#description' => t('autoviewcams.'),
	  );
  } else {
	  $form['advanced']['param']['autoviewcams'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->autoviewcams) ? $node->autoviewcams : variable_get('vconf_autoviewcams2', "1"),
	  );
  }

  if (user_access('edit showtimer', $user)) {
	  $options = array("1" => t('Yes'), "0" => t('No'));
	  $form['advanced']['param']['showtimer'] = array(
		'#type' => 'select',
		'#title' => t('showTimer'),
		'#default_value' => isset($node->showtimer) ? $node->showtimer : variable_get('vconf_showtimer2', "1"),
		'#options' => $options,
		'#description' => t('showTimer.'),
	  );
  } else {
	  $form['advanced']['param']['showtimer'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->showtimer) ? $node->showtimer : variable_get('vconf_showtimer2', "1"),
	  );
  }

  if (user_access('edit panelfiles', $user)) {
	  $options = array("1" => t('Yes'), "0" => t('No'));
	  $form['advanced']['param']['panelfiles'] = array(
		'#type' => 'select',
		'#title' => t('panelfiles'),
		'#default_value' => isset($node->panelfiles) ? $node->panelfiles : variable_get('vconf_panelfiles2', "1"),
		'#options' => $options,
		'#description' => t('panelfiles.'),
	  );
  } else {
	  $form['advanced']['param']['panelfiles'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->panelfiles) ? $node->panelfiles : variable_get('vconf_panelfiles2', "1"),
	  );
  }

  if (user_access('edit file_upload', $user)) {
	  $options = array("1" => t('Yes'), "0" => t('No'));
	  $form['advanced']['param']['file_upload'] = array(
		'#type' => 'select',
		'#title' => t('file_upload'),
		'#default_value' => isset($node->file_upload) ? $node->file_upload : variable_get('vconf_file_upload2', "1"),
		'#options' => $options,
		'#description' => t('file_upload.'),
	  );
  } else {
	  $form['advanced']['param']['file_upload'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->file_upload) ? $node->file_upload : variable_get('vconf_file_upload2', "1"),
	  );
  }

  if (user_access('edit file_delete', $user)) {
	  $options = array("1" => t('Yes'), "0" => t('No'));
	  $form['advanced']['param']['file_delete'] = array(
		'#type' => 'select',
		'#title' => t('file_delete'),
		'#default_value' => isset($node->file_delete) ? $node->file_delete : variable_get('vconf_file_delete2', "1"),
		'#options' => $options,
		'#description' => t('file_delete.'),
	  );
  } else {
	  $form['advanced']['param']['file_delete'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->file_delete) ? $node->file_delete : variable_get('vconf_file_delete2', "1"),
	  );
  }

  if (user_access('edit enabledvideo', $user)) {
	  $options = array("1" => t('Yes'), "0" => t('No'));
	  $form['advanced']['param']['enabledvideo'] = array(
		'#type' => 'select',
		'#title' => t('enabledVideo'),
		'#default_value' => isset($node->enabledvideo) ? $node->enabledvideo : variable_get('vconf_enabledvideo2', "1"),
		'#options' => $options,
		'#description' => t('enabledVideo.'),
	  );
  } else {
	  $form['advanced']['param']['enabledvideo'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->enabledvideo) ? $node->enabledvideo : variable_get('vconf_enabledvideo2', "1"),
	  );
  }

  if (user_access('edit enabledsound', $user)) {
	  $options = array("1" => t('Yes'), "0" => t('No'));
	  $form['advanced']['param']['enabledsound'] = array(
		'#type' => 'select',
		'#title' => t('enabledSound'),
		'#default_value' => isset($node->enabledsound) ? $node->enabledsound : variable_get('vconf_enabledsound2', "1"),
		'#options' => $options,
		'#description' => t('enabledSound.'),
	  );
  } else {
	  $form['advanced']['param']['enabledsound'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->enabledsound) ? $node->enabledsound : variable_get('vconf_enabledsound2', "1"),
	  );
  }

  if (user_access('edit configuresource', $user)) {
	  $options = array("1" => t('Yes'), "0" => t('No'));
	  $form['advanced']['param']['configuresource'] = array(
		'#type' => 'select',
		'#title' => t('configureSource'),
		'#default_value' => isset($node->configuresource) ? $node->configuresource : variable_get('vconf_configuresource2', "1"),
		'#options' => $options,
		'#description' => t('configureSource.'),
	  );
  } else {
	  $form['advanced']['param']['configuresource'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->configuresource) ? $node->configuresource : variable_get('vconf_configuresource2', "1"),
	  );
  }

  if (user_access('edit advancedcamsettings', $user)) {
	  $options = array("1" => t('Yes'), "0" => t('No'));
	  $form['advanced']['param']['advancedcamsettings'] = array(
		'#type' => 'select',
		'#title' => t('advancedcamsettings'),
		'#default_value' => isset($node->advancedcamsettings) ? $node->advancedcamsettings : variable_get('vconf_advancedcamsettings2', "1"),
		'#options' => $options,
		'#description' => t('advancedcamsettings.'),
	  );
  } else {
	  $form['advanced']['param']['advancedcamsettings'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->advancedcamsettings) ? $node->advancedcamsettings : variable_get('vconf_advancedcamsettings2', "1"),
	  );
  }

  if (user_access('edit showcamsettings', $user)) {
	  $options = array("1" => t('Yes'), "0" => t('No'));
	  $form['advanced']['param']['showcamsettings'] = array(
		'#type' => 'select',
		'#title' => t('showcamSettings'),
		'#default_value' => isset($node->showcamsettings) ? $node->showcamsettings : variable_get('vconf_showcamsettings2', "1"),
		'#options' => $options,
		'#description' => t('showcamSettings.'),
	  );
  } else {
	  $form['advanced']['param']['showcamsettings'] = array(
		'#type' => 'hidden',
		'#default_value' => isset($node->showcamsettings) ? $node->showcamsettings : variable_get('vconf_showcamsettings2', "1"),
	  );
  }

  return $form;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 * We don't want the 2 way video chat rooms to get to the first page and the wrong kind of attention.
 */
function vconf_form_vconf_node_form_alter(&$form, $form_state) {
  $form['options']['promote']['#disabled'] = TRUE;
  $form['options']['promote']['#default_value'] = 0;
  $form['options']['promote']['#value'] = 0;
}

/**
 * Implementation of hook_delete().
 */
function vconf_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
	if (user_access('delete video conference room', $user)) {
		db_query('DELETE FROM {vconf_rooms} WHERE nid = %d', $node->nid);
	}
}

/**
 * Implementation of hook_insert().
 */
function vconf_insert($node) {

  $room = check_plain($node->room);
  if ($room == variable_get('vconf_room_prefix2', 'InstantRoom')) {
    $room = variable_get('vconf_room_prefix2', 'InstantRoom') . "_" . base_convert((time() - 1225500000) . rand(0, 10), 10, 36);
  }

  $cam = explode("x", $node->advanced['webcam']['resolution']);
  $expiration = 0;
  if ($node->advanced['expire']) {
    $expiration = $node->advanced['expire'] * 3600 + time();
  }
  $welcome = nl2br($node->advanced['welcome']);
  $ztime = time();


  db_query("INSERT INTO {vconf_rooms} ( vid, nid, room, welcome, layoutcode, background_url, timecreated, timelastaccess, timeexpire, timeout, credits, bandwidth, maxbandwidth, camwidth, camheight, camfps, visitors,
						micrate, filterregex, filterreplace, tutorial, fillwindow, panelfiles, autoviewcams, showtimer, file_upload, file_delete, advancedcamsettings, enabledvideo, enabledsound, configuresource, showcamsettings) 
						VALUES ( '%d','%d','%s','%s','%s','%s',%d, '%d','%d','%d','%d','%d','%d','%d','%d','%d','%d','%d'  ,'%s','%s','%s',%d, '%d','%d','%d','%d','%d','%d','%d','%d','%d','%d')", 
						$node->vid, $node->nid, $room, $welcome, nl2br($node->advanced['layoutcode']), nl2br($node->advanced['background_url']), $ztime, $ztime, $expiration, $node->advanced['cleanup'] * 3600, $node->advanced['credits'], $node->advanced['webcam']['bandwidth'], $node->advanced['webcam']['maxbandwidth'], $cam[0], $cam[1], $node->advanced['webcam']['camfps'], $node->advanced['visitors'], 
						$node->advanced['webcam']['micrate'], addslashes($node->advanced['filterregex']), addslashes($node->advanced['filterreplace']), $node->advanced['tutorial'], $node->advanced['fillwindow'], $node->advanced['param']['panelfiles'], $node->advanced['param']['autoviewcams'], $node->advanced['param']['showtimer'], $node->advanced['param']['file_upload'], 
						$node->advanced['param']['file_delete'], $node->advanced['param']['advancedcamsettings'], $node->advanced['param']['enabledvideo'], $node->advanced['param']['enabledsound'], $node->advanced['param']['configuresource'], $node->advanced['param']['showcamsettings']);
						

  $options = array("attributes" => array("title" => $node->room, 'target' => '_blank'));
  $link = l($room, "node/" . $node->nid, $options);
  drupal_set_message(t('Use this link to access this Video Conference room and invite the other participant: ') . "<BR>" . $link);
}

/**
 * Implementation of hook_insert().
 */
function vconf_update($node) {

  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    vconf_insert($node);
  }
  else {

    $room = check_plain($node->room);
    if ($room == variable_get('vconf_room_prefix2', 'InstantRoom')) {
      $room = variable_get('vconf_room_prefix2', 'InstantRoom') . "_" . base_convert((time() - 1225500000) . rand(0, 10), 10, 36);
    }

    $cam = explode("x", $node->advanced['webcam']['resolution']);
    $expiration = 0;
    if ($node->advanced['expire']) {
      $expiration = $node->advanced['expire'] * 3600 + time();
    }
    $welcome = nl2br($node->advanced['welcome']);
    $ztime = time();

    db_query("UPDATE {vconf_rooms} SET room='%s', welcome='%s', layoutcode='%s', background_url='%s', timecreated=%d, timelastaccess=%d, timeexpire=%d, timeout=%d, credits=%d, bandwidth=%d, maxbandwidth=%d, camwidth=%d, camheight=%d, camfps=%d, visitors=%d, 
							micrate=%d, filterregex='%s', filterreplace='%s', tutorial=%d, fillwindow=%d, panelfiles=%d, autoviewcams=%d, showtimer=%d, file_upload=%d, file_delete=%d, advancedcamsettings=%d, enabledvideo=%d, enabledsound=%d, configuresource=%d, showcamsettings=%d   
							WHERE vid = %d", $room, $welcome, nl2br($node->advanced['layoutcode']), nl2br($node->advanced['background_url']), $ztime, $ztime, $expiration, $node->advanced['cleanup'] * 3600, $node->advanced['credits'], $node->advanced['webcam']['bandwidth'], $node->advanced['webcam']['maxbandwidth'], $cam[0], $cam[1], $node->advanced['webcam']['camfps'], $node->advanced['visitors'], 
							$node->advanced['webcam']['micrate'], $node->advanced['filterregex'], $node->advanced['filterreplace'], $node->advanced['tutorial'], $node->advanced['fillwindow'], $node->advanced['param']['panelfiles'], $node->advanced['param']['autoviewcams'], $node->advanced['param']['showtimer'], $node->advanced['param']['file_upload'], 
							$node->advanced['param']['file_delete'], $node->advanced['param']['advancedcamsettings'], $node->advanced['param']['enabledvideo'], $node->advanced['param']['enabledsound'], $node->advanced['param']['configuresource'], $node->advanced['param']['showcamsettings'], 
							$node->vid );
  }
}

/**
 * Implementation of hook_load().
 */
function vconf_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {vconf_rooms} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function vconf_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
	global $user;
  vconf_cleanup();

  $disabled_content = "";
  $room_access      = 1;
  $myroom           = db_query("SELECT * FROM {vconf_rooms} WHERE room='%s'", $node->room);
  if ($myroom !== FALSE) {
    $row = db_fetch_array($myroom);
    if (!$node->visitors && !$user->name) {
      $room_access = 0;
    }
  }
  else $disabled_content = t('Room not found. Probably cleaned up: ') . $node->room;

  if (!$room_access && !$disabled_content) {

    $disabled_content .= t('Instant access to visitors is disabled. You need to be registered and logged into this website to access this room.');

  }

  $options        = array("attributes" => array("title" => $node->room, 'target' => '_blank'));
  $link           = l($node->room, "node/". $node->nid, $options);
  $access_content = "<BR>". t('Use this link to access this Video Conference room and invite the other participant: ') ."<BR>". $link;

  $stats_content .= t('Resolution') .": ". $node->camwidth ."x". $node->camheight . "@" . $node->camfps . "<BR>" . t('Bandwidth') . ": " . $node->bandwidth . "/" . $node->maxbandwidth . t(' bytes/s') . "<BR>" . t('Streaming time used') . ": " . floor($node->timeused / 60000) . t(' minutes') . "<BR>" . t('Credits') . ": " . ($node->credits ? ($node->credits . t(' minutes')) : t('unlimited'));

  if ($teaser) {
    $node->content['body'] = array(
      '#value' => $link . "<BR>" . $node->body,
    );
  }
  else {
    $node->content['body'] = array(
      '#value' => drupal_get_form('vconf_start_form', $node) . "<BR>" . $node->body . $access_content . "<BR>" . $stats_content,
    );
  }

  if ($disabled_content) $node->content['body'] = array(
    '#value' => $disabled_content,
  );

  return $node;
}

