<?php
// profileplus.module,v 1.8.2.7.2.3 2010/08/06 21:02:38 jamesmarks Exp

/**
 * @file
 * Allows full searching of all user profile fields or specific searching
 * of specific profile fields for Drupal 6
 *
 * @author Mike Carter <mike@ixis.co.uk>
 * @author Dave Myburgh <dave@mybesinformatik.com>
 * @author James Marks <james.a.marks@mac.com>
 */

/**
 * Implementation of hook_admin_settings().
 */
function profileplus_admin_settings() {
  $form['profileplus_show_advanced_search'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show advanced search fieldset on User Profiles search form'),
    '#description' => t('Adds advanced search fieldset to User Profiles search from.'),
    '#default_value' => variable_get('profileplus_show_advanced_search', 0),
  );
  $form['profileplus_uncollapse_fieldset_with_values'] = array(
    '#type' => 'checkbox',
    '#title' => t('Uncollapse advanced search fieldset when fields have values'),
    '#description' => t('Uncollapses the advanced search fieldset to show values used in advanced search results.'),
    '#default_value' => variable_get('profileplus_uncollapse_fieldset_with_values', 0),
  );

  $result = db_query("SELECT title, name, type FROM profile_fields WHERE visibility != %d AND visibility != %d ORDER BY category, weight", array(PROFILE_PRIVATE, PROFILE_HIDDEN));
  $options = array();
  while ($row = db_fetch_array($result)) {
      $options[$row['name']] = $row['title'];
  }
  $form['profileplus_search_fields'] = array(
    '#type'          => 'checkboxes',
    '#title'         => t('Include these profile fields in the advanced profile search form'),
    '#options'       => $options,
    '#default_value' => variable_get('profileplus_search_fields', array_keys($options)),
  );
  return system_settings_form($form);
}


/**
 * Implementation of hook_form_alter().
 */
function profileplus_form_alter(&$form, $form_state, $form_id) {

  // If it's a search form, remove any serialized profile data from keywords field.
  if ($form_id == 'search_form' && user_access('use advanced search')) {
    $keys = explode('|', $form['basic']['inline']['keys']['#default_value']);
    $key_count = count($keys);
    $collapsed = TRUE;
    if ($profile_field_values = unserialize($keys[$key_count-1])) {
      array_pop($keys);
      $keys_default_value = implode('|', $keys);
      $form['basic']['inline']['keys']['#default_value'] = $keys_default_value;
    }

    // If it's a profile search, test profile field values to set #collapsed for fieldset
    if ($form['module']['#value'] == 'profile') {
      if ($profile_field_values) {
        if (variable_get('profileplus_uncollapse_fieldset_with_values', 0)) {
          $collapsed = FALSE;
        }
        else {
          $collapsed = TRUE;
        }
      }

      // Show advanced search if settings are configured to do so
      if (variable_get('profileplus_show_advanced_search', 0)) {
        $searchable_fields = variable_get('profileplus_search_fields', 1);
        $form['advanced'] = array(
          '#type' => 'fieldset',
          '#title' => t('Advanced profile search'),
          '#collapsible' => TRUE,
          '#collapsed' => $collapsed,
          '#attributes' => array('class' => 'search-advanced'),
        );
        if (user_access('administer users')) {
          $result = db_query("SELECT fid, title, name, type, category FROM profile_fields WHERE visibility != %d ORDER BY category, weight", array(PROFILE_HIDDEN));
        }
        else {
          $result = db_query("SELECT fid, title, name, type FROM profile_fields WHERE visibility != %d AND visibility != %d ORDER BY category, weight", array(PROFILE_PRIVATE, PROFILE_HIDDEN));
        }
        $previous_category = '';
        while ($row = db_fetch_array($result)) {
          if ($searchable_fields[$row['name']]) {
            if ($row['category'] != $previous_category) {
              $form['advanced'][$row['category']] = array(
                '#type' => 'fieldset',
                '#title' => $row['category'],
                '#collapsable' => FALSE,
              );
            }
            if ($row['type'] == 'checkbox') {
              $form['advanced'][$row['category']][$row['name']] = array(
                '#type' => 'checkbox',
                '#title' => $row['title'],
                '#default_value' => $profile_field_values[$row['name']],
              );
            }
            else {
              $form['advanced'][$row['category']][$row['name']] = array(
                '#type' => 'textfield',
                '#title' => $row['title'],
                '#default_value' => $profile_field_values[$row['name']],
              );
            }
            $previous_category = $row['category'];
            $form_state['profile_field_names'][$row['name']] = $row['type'];
          }
        }
        $form['advanced']['submit'] = array(
          '#type' => 'submit',
          '#value' => t('Advanced search'),
        );
        $form['#validate'][] = 'profile_search_validate';
      }
    }
  }
}


/**
 * Implementation of hook_help().
 */
function profileplus_help($path, $arg) {
  switch ($path) {
    case 'admin/help#profileplus':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The ProfilePlus module allows you to perform simple or complex searches of user profiles using Drupal's built-in search capabilities.") . '</p>';
      $output .= '<h3>' . t("Uses") . '</h3>';
      $output .= '<dt>' . t("Profile search") . '</dt>';
      $output .= '<dd>' . t("Regular profile search returns any active user profiles that contain any of the profile search keywords in the username field (OR email field for searches by administrators) OR any of the public profile fields.") . '</dd>';
      $output .= '<dt>' . t("Advanced profile search") . '</dt>';
      $output .= '<dd>' . t("Advanced profile search returns only those active user profiles that contain any of the profile search keywords in the username field (OR the email field for searches by administrators) AND any of the advanced profile search keywords in each of their respective profile fields.") . '</dd>';
      $output .= '<h3>' . t("Administration") . '</h3>';
      $output .= '<dt>' . t("Permissions") . '</dt>';
      $output .= '<dd><strong>' . t("Users must have both the Search module's 'use advanced search' permission and ProfilePlus module's 'search user profiles' permission in order to be able to use advanced profile search.") . '</strong></dd>';
      $output .= '<dd>' . t('The ProfilePlus module provides permissions for administering advanced profile search settings and for searching user profiles which can be set by role on the <a href="@permissions_page">permissions</a> page.', array('@permissions_page' => url('admin/settings/permissions'))) . '</dd>';
      $output .= '<dt>' . t("Configuration") . '</dt>';
      $output .= '<dd>' . t('<a href="@settings_page">ProfilePlus settings</a> allow control over the display of the advance search fieldset in the profile search and over which profile fields are included in the advanced profile search fieldset.', array('@settings_page' => url('admin/settings/profileplus'))) . '</dd>';
      $output .= '<h3>' . t("Important notes and/or tips") . '</h3>';
      $output .= '<dt>' . t("Modifying your template.php file to remove the 'Users' search tab") . '</dt>';
      $output .= '<dd>' . t("ProfilePlus includes and extends the functionality of Drupal's built-in user search making the 'Users' search tab unnecessary and redundant. You may remove the 'Users' tab from the search form (although it is not necessary to do so for this module to function) by modifying your theme's template.php file as directed in the README.txt file.") . '</dd>';
      break;
    case 'admin/settings/profileplus':
      $output = '<p>' . t("Regular (non-advanced) profile search will search all public profile fields for submitted keywords whether the profile fields are displayed in the advanced profile search form or not. Removing profile fields from the advanced profile search form merely prohibits limiting an advanced search term to that specific field.") . '</p>';
      $output .= '<p>' . t("To prohibit a profile field from being searched by profile search, the profile field must be made a non-public field.") . '</p>';
      break;
   }
   return $output;
}


/**
 * Implementation of hook_form_alter().
 */
function profileplus_menu() {
  $items = array();
  $items['admin/settings/profileplus'] = array(
    'title'            => 'ProfilePlus settings',
    'description'      => 'Advanced search settings for ProfilePlus.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('profileplus_admin_settings'),
    'access arguments' => array('administer profileplus'),
    'type'             => MENU_NORMAL_ITEM,
  );
  return $items;
}


/**
 * Implementation of hook_perm().
 */
function profileplus_perm() {
  return array(
    'search user profiles',
    'administer profileplus',
  );
}


/*
 * Implementation of hook_search().
 */
function profile_search($op = 'search', $keys = null) {

  global $user;

  switch ($op) {
    case 'name':
      if (user_access('access user profiles')) {
        return t('User Profiles');
      }
    case 'search':
      if (user_access('access user profiles')) {

        // Initialize variables
        $sql_args = array();
        $advanced_profile_wheres = array();
        $advanced_profile_where_args = array();
        $advanced_profile_where_statement = '';

        $regular_profile_wheres = array();
        $regular_profile_where_args = array();
        $regular_profile_where_statement = '';

        $profiles = array();

        // Test $keys for serialized profile field data
        $key_elements = explode('|', strip_tags($keys));
        $key_element_count = count($key_elements);
        if ($profile_field_values = unserialize($key_elements[$key_element_count-1])) {

          // Remove the serialized profile data from $keys
          // Use a pipe ('|') on implode to backtrack previous explode
          array_pop($key_elements);
          $keys = implode('|', $key_elements);

          // Get profile_field names and fids
          if (user_access('administer users')) {
            $result = db_query('SELECT fid, name FROM {profile_fields} WHERE visibility != %d', array(PROFILE_HIDDEN));
          }
          else {
            $result = db_query('SELECT fid, name FROM {profile_fields} WHERE visibility != %d OR visibility != %d', array(PROFILE_PRIVATE, PROFILE_HIDDEN));
          }
          while ($row = db_fetch_array($result)) {
            $profile_fields[$row['name']] = $row['fid'];
          }

          // Assemble components of advanced profile search SQL statement
          $i = 0;
          foreach ($profile_field_values as $name => $value) {

            // Use the profile field value only if it is not a private field
            if (array_key_exists($name, $profile_fields)) {
              $i++;

              // Join the profile_values table for each advanced profile field
              // that contains any value
              $joins[] = "LEFT JOIN {profile_values} pv%d ON u.uid = pv%d.uid";
              $join_args[] = $i;
              $join_args[] = $i;

              // Iterate through each word in a given profile search field
              $profile_field_words = explode(' ', $value);
              $advanced_profile_word_wheres = array();
              foreach ($profile_field_words as $profile_field_word) {
                $advanced_profile_word_wheres[] = "(pv%d.fid = %d AND LOWER(pv%d.value) LIKE LOWER('%%%s%%'))";
                $advanced_profile_where_args[] = $i;
                $advanced_profile_where_args[] = $profile_fields[$name];
                $advanced_profile_where_args[] = $i;
                $advanced_profile_where_args[] = check_plain(trim($profile_field_word));
              }
              $advanced_profile_wheres[] = '(' . implode(' OR ', $advanced_profile_word_wheres) . ')';
            }
          }
        }
        // If $keywords array does not contain serialized profile data
        else {
          // Simpler joins
          $joins[] = 'LEFT JOIN {profile_values} pv ON u.uid = pv.uid';
          $joins[] = 'LEFT JOIN {profile_fields} pf ON pv.fid = pf.fid';
        }

        // Replace wildcards ('*') with an SQL wildcard ('%')
        $keys = preg_replace('!\*+!', '%', $keys);

        // Advanced profile search can be conducted without values in the
        // keywords field
        if ($keys) {

          // Iterate through each keyword
          $keywords = explode(' ', $keys);
          foreach ($keywords as $keyword) {

            // Used for both regular and advanced search
            $name_wheres[] = "LOWER(u.name) LIKE LOWER('%%%s%%')";
            $name_where_args[] = check_plain($keyword);

            // Used for admins for both regular and advanced search
            $mail_wheres[] = "LOWER(u.mail) LIKE LOWER('%%%s%%')";
            $mail_where_args[] = check_plain($keyword);

            // Used for regular search only.
            $regular_profile_wheres[] = "LOWER(pv.value) LIKE LOWER('%%%s%%')";
            $regular_profile_where_args[] = check_plain($keyword);
          }

          // Admins can search user.mail
          if (user_access('administer users')) {
            $user_where_statement = implode(' OR ', array_merge($name_wheres, $mail_wheres));
            $user_where_args = array_merge($name_where_args, $mail_where_args);
          }
          elseif (user_access('search user profiles')) {
            $user_where_statement = implode(' OR ', $name_wheres);
            $user_where_args = $name_where_args;
          }
        }

        // If it's an advanced search
        if ($profile_field_values) {

          // Advanced search MUST have $joins
          $join_statement = implode(' ', $joins);
          $sql_args = array_merge($sql_args, $join_args);

          // Advanced search MAY have $keys and, consequently, a $user_where_statement
          if (strlen($user_where_statement) > 0) {
            $user_where_statement = '(' . $user_where_statement . ')';
            $sql_args = array_merge($sql_args, $user_where_args);
          }

          // Advanced search MUST have an $advanced_profile_where_statement
          $advanced_profile_where_statement = implode(' AND ', $advanced_profile_wheres);
          $sql_args = array_merge($sql_args, $advanced_profile_where_args);

          // If there is a $user_where_statement, the $advanced_profile_where_statement
          // MUST be preceded by 'AND'
          if (strlen($user_where_statement) > 0) {
            $advanced_profile_where_statement = ' AND ' . $advanced_profile_where_statement;
          }
        }
        // If it's a regular search
        else {

          // Regular search MUST have $joins
          $join_statement = implode(' ', $joins);

          // Regular search MUST have $keys and, therefore, $user_where_args
          // and $regular_profile_where_args
          $regular_profile_where_statement = ' OR ' . implode(' OR ', $regular_profile_wheres);
          $sql_args = array_merge($sql_args, $user_where_args, $regular_profile_where_args);
        }

        // User status value
        $sql_args[] = 1;

        // Need to accommodate different queries for admins and regular users
        $result = db_query('SELECT DISTINCT u.uid FROM {users} u ' . $join_statement . ' WHERE ' . $user_where_statement . $regular_profile_where_statement . $advanced_profile_where_statement . ' AND u.status = %d', $sql_args);
        while ($row = db_fetch_array($result)) {
          $items[] = $row['uid'];
        }

        if ($items) {
          // Append profile field values to keys so that they show up in the
          // search_excerpt string
          if ($profile_field_values) {
            $key_values = explode(' ', $keys);
            $keys = implode(' ', array_merge($key_values, $profile_field_values));
          }
          $placeholders = array();
          $sql_args = array();
          foreach ($items as $index => $uid) {
            $placeholders[] = '%d';
            $sql_args[] = $uid;
          }
          $pager_result = pager_query('SELECT uid FROM {users} WHERE uid IN (' . implode(',', $placeholders) . ') ORDER BY name', $limit = 10, $element = 0, $count_query = NULL, $sql_args);
            while ($pageditems = db_fetch_object($pager_result)) {

              // Load the user object
              $user_profile = user_load(array('uid'=>$pageditems->uid));

              // Create the profile fields array
              // Show private fields to administrators and people viewing their own account.
              // if (user_access('administer users') || $GLOBALS['user']->uid == $user_profile->uid) {
              if (user_access('administer users') || $user->uid == $user_profile->uid) {
                // Administrators can also search in the otherwise private email field.
                $result = db_query('SELECT * FROM {profile_fields} WHERE visibility != %d ORDER BY category, weight', PROFILE_HIDDEN);
              }
              else {
                $result = db_query('SELECT * FROM {profile_fields} WHERE visibility != %d AND visibility != %d ORDER BY category, weight', PROFILE_PRIVATE, PROFILE_HIDDEN);
              }

              $profile_fields = array();
              while ($field = db_fetch_object($result)) {
                if ($value = profile_view_field($user_profile, $field)) {
                  $title = ($field->type != 'checkbox') ? check_plain($field->title) : NULL;
                  $item = array(
                    'title' => $title,
                    'value' => $value,
                    'class' => $field->name,
                  );
                  $profile_fields[$field->category][$field->name] = $item;
                }
              }

              $entry = array();
              foreach ($profile_fields as $category => $fields) {
                foreach ($fields as $field) {
                  $entry[] = $field['value'];
                }
              }
              $view = implode(' | ', $entry);
              if (user_access('administer users')) {
                $profiles[] = array('title' => $user_profile->name .' ('. $user_profile->mail .')', 'link' => url('user/'. $user_profile->uid, array('absolute' => TRUE)), 'snippet' => search_excerpt($keys, $view));
              }
              else {
                $profiles[] = array('title' => $user_profile->name, 'link' => url('user/'. $user_profile->uid, array('absolute' => TRUE)), 'snippet' => search_excerpt($keys, $view));
              }
            }
        }
        return $profiles;
      }
  }
}


/**
 * Form API callback for the search form. Registered in profileplus_form_alter().
 */
function profile_search_validate(&$form, &$form_state) {

  // Initialise using any existing basic search keywords.
  $keys = check_plain($form_state['values']['processed_keys']);

  // If advanced search is being used, populate field values
  if ($form_state['profile_field_names']) {
    foreach ($form_state['profile_field_names'] as $profile_field_name => $profile_field_type) {
      if ($form_state['values'][$profile_field_name]) {
        $profile_values[$profile_field_name] = $form_state['values'][$profile_field_name];
      }
    }
  }

  // If profile fields have values, add them to the $keys string
  if ($profile_values) {
    $profile_values_string = serialize($profile_values);
    if ($keys) {
      $keys .= '|' . $profile_values_string;
    }
    else {
      $keys = $profile_values_string;
    }
  }

  if (!empty($keys)) {
    form_set_value($form['basic']['inline']['processed_keys'], trim($keys), $form_state);
  }
}
